
> react-router-devtools-docs@0.0.1 check:fix C:\Users\AlemTuzlak\projects\Remix-Dev-Tools\docs
> biome check --fix .

.\vite.config.ts:44:3 suppressions/unused ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Suppression comment has no effect. Remove the suppression or make sure you are suppressing the correct rule.
  
    42 │ 	server: {
    43 │ 		open: true,
  > 44 │ 		// biome-ignore lint/nursery/noProcessEnv: Its ok to use process.env here
       │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    45 │ 		port: Number(process.env.PORT || 4280),
    46 │ 	},
  

.\app\env.server.ts:19:2 suppressions/unused ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Suppression comment has no effect. Remove the suppression or make sure you are suppressing the correct rule.
  
    17 │  */
    18 │ function initEnv() {
  > 19 │ 	// biome-ignore lint/nursery/noProcessEnv: This should be the only place to use process.env directly
       │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    20 │ 	const envData = envSchema.safeParse(process.env)
    21 │ 
  

.\app\components\ui\Meteors.tsx:13:5 lint/style/useSelfClosingElements  FIXABLE  ━━━━━━━━━━━━━━━━━━━

  × JSX elements without children should be marked as self-closing. In JSX, it is valid for any element to be self-closing.
  
    12 │   return meteors.map((el, idx) => (
  > 13 │     <span
       │     ^^^^^
  > 14 │       key={'meteor' + idx}
        ...
  > 25 │       }}
  > 26 │     ></span>
       │     ^^^^^^^^
    27 │   ))
    28 │ }
  
  i Unsafe fix: Use a SelfClosingElement instead
  
    26 │ ····></span>
       │     -- ---- 

.\app\components\ui\Meteors.tsx:14:12 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    12 │   return meteors.map((el, idx) => (
    13 │     <span
  > 14 │       key={'meteor' + idx}
       │            ^^^^^^^^^^^^^^
    15 │       className={cn(
    16 │         'absolute left-1/2 top-1/2 h-0.5 w-0.5 rotate-[215] animate-meteor-effect rounded-full bg-slate-500 shadow-[0_0_0_1px_#ffffff10]',
  
  i Unsafe fix: Use a template literal.
  
    12 12 │     return meteors.map((el, idx) => (
    13 13 │       <span
    14    │ - ······key={'meteor'·+·idx}
       14 │ + ······key={`meteor${idx}`}
    15 15 │         className={cn(
    16 16 │           'absolute left-1/2 top-1/2 h-0.5 w-0.5 rotate-[215] animate-meteor-effect rounded-full bg-slate-500 shadow-[0_0_0_1px_#ffffff10]',
  

.\app\components\ui\Meteors.tsx:22:15 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    20 │       style={{
    21 │         top: 0,
  > 22 │         left: Math.floor(Math.random() * (1920 - -1920) + -1920) + 'px',
       │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    23 │         animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + 's',
    24 │         animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + 's',
  
  i Unsafe fix: Use a template literal.
  
    20 20 │         style={{
    21 21 │           top: 0,
    22    │ - ········left:·Math.floor(Math.random()·*·(1920·-·-1920)·+·-1920)·+·'px',
       22 │ + ········left:·`${Math.floor(Math.random()·*·(1920·-·-1920)·+·-1920)}px`,
    23 23 │           animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + 's',
    24 24 │           animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + 's',
  

.\app\components\ui\Meteors.tsx:23:25 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    21 │         top: 0,
    22 │         left: Math.floor(Math.random() * (1920 - -1920) + -1920) + 'px',
  > 23 │         animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + 's',
       │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    24 │         animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + 's',
    25 │       }}
  
  i Unsafe fix: Use a template literal.
  
    21 21 │           top: 0,
    22 22 │           left: Math.floor(Math.random() * (1920 - -1920) + -1920) + 'px',
    23    │ - ········animationDelay:·Math.random()·*·(0.8·-·0.2)·+·0.2·+·'s',
       23 │ + ········animationDelay:·`${Math.random()·*·(0.8·-·0.2)·+·0.2}s`,
    24 24 │           animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + 's',
    25 25 │         }}
  

.\app\components\ui\Meteors.tsx:24:28 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    22 │         left: Math.floor(Math.random() * (1920 - -1920) + -1920) + 'px',
    23 │         animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + 's',
  > 24 │         animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + 's',
       │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    25 │       }}
    26 │     ></span>
  
  i Unsafe fix: Use a template literal.
  
    22 22 │           left: Math.floor(Math.random() * (1920 - -1920) + -1920) + 'px',
    23 23 │           animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + 's',
    24    │ - ········animationDuration:·Math.floor(Math.random()·*·(10·-·2)·+·2)·+·'s',
       24 │ + ········animationDuration:·`${Math.floor(Math.random()·*·(10·-·2)·+·2)}s`,
    25 25 │         }}
    26 26 │       ></span>
  

.\app\components\ui\Meteors.tsx:12:23 lint/correctness/noUnusedFunctionParameters  FIXABLE  ━━━━━━━━━━

  × This parameter is unused.
  
    10 │   const meteors = new Array(number || 20).fill(true)
    11 │ 
  > 12 │   return meteors.map((el, idx) => (
       │                       ^^
    13 │     <span
    14 │       key={'meteor' + idx}
  
  i Unused parameters might be the result of an incomplete refactoring.
  
  i Unsafe fix: If this is intentional, prepend el with an underscore.
  
    10 10 │     const meteors = new Array(number || 20).fill(true)
    11 11 │   
    12    │ - ··return·meteors.map((el,·idx)·=>·(
       12 │ + ··return·meteors.map((_el,·idx)·=>·(
    13 13 │       <span
    14 14 │         key={'meteor' + idx}
  

.\app\components\ui\Meteors.tsx:12:23 lint/correctness/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━

  × This parameter is unused.
  
    10 │   const meteors = new Array(number || 20).fill(true)
    11 │ 
  > 12 │   return meteors.map((el, idx) => (
       │                       ^^
    13 │     <span
    14 │       key={'meteor' + idx}
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Unsafe fix: If this is intentional, prepend el with an underscore.
  
    10 10 │     const meteors = new Array(number || 20).fill(true)
    11 11 │   
    12    │ - ··return·meteors.map((el,·idx)·=>·(
       12 │ + ··return·meteors.map((_el,·idx)·=>·(
    13 13 │       <span
    14 14 │         key={'meteor' + idx}
  

.\app\components\ui\Meteors.tsx:14:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    12 │   return meteors.map((el, idx) => (
    13 │     <span
  > 14 │       key={'meteor' + idx}
       │                       ^^^
    15 │       className={cn(
    16 │         'absolute left-1/2 top-1/2 h-0.5 w-0.5 rotate-[215] animate-meteor-effect rounded-full bg-slate-500 shadow-[0_0_0_1px_#ffffff10]',
  
  i This is the source of the key value.
  
    10 │   const meteors = new Array(number || 20).fill(true)
    11 │ 
  > 12 │   return meteors.map((el, idx) => (
       │                           ^^^
    13 │     <span
    14 │       key={'meteor' + idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\app\components\ui\Sparkles.tsx:80:33 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    78 │                   mode: 'repulse',
    79 │                 },
  > 80 │                 resize: true as any,
       │                                 ^^^
    81 │               },
    82 │               modes: {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\Sparkles.tsx:455:9 lint/style/useSelfClosingElements  FIXABLE  ━━━━━━━━━━━━━━━━━

  × JSX elements without children should be marked as self-closing. In JSX, it is valid for any element to be self-closing.
  
    453 │         />
    454 │ 
  > 455 │         <div className="absolute inset-0 h-full w-full bg-slate-950 [mask-image:radial-gradient(350px_200px_at_top,transparent_20%,white)]"></div>
        │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    456 │       </div>
    457 │     </div>
  
  i Unsafe fix: Use a SelfClosingElement instead
  
    453 453 │           />
    454 454 │   
    455     │ - ········<div·className="absolute·inset-0·h-full·w-full·bg-slate-950·[mask-image:radial-gradient(350px_200px_at_top,transparent_20%,white)]"></div>
        455 │ + ········<div·className="absolute·inset-0·h-full·w-full·bg-slate-950·[mask-image:radial-gradient(350px_200px_at_top,transparent_20%,white)]"·/>
    456 456 │         </div>
    457 457 │       </div>
  

.\app\components\ui\Sparkles.tsx:432:7 lint/correctness/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━

  × This variable is unused.
  
    430 │   )
    431 │ }
  > 432 │ const Sparkles = () => {
        │       ^^^^^^^^
    433 │   return (
    434 │     <div className="flex h-screen w-full flex-col items-center justify-center overflow-hidden rounded-md bg-slate-950 pt-40">
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Unsafe fix: If this is intentional, prepend Sparkles with an underscore.
  
    430 430 │     )
    431 431 │   }
    432     │ - const·Sparkles·=·()·=>·{
        432 │ + const·_Sparkles·=·()·=>·{
    433 433 │     return (
    434 434 │       <div className="flex h-screen w-full flex-col items-center justify-center overflow-hidden rounded-md bg-slate-950 pt-40">
  

.\app\components\ui\MaskContainer.tsx:19:54 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    17 │ }) => {
    18 │   const [isHovered, setIsHovered] = useState(false)
  > 19 │   const [mousePosition, setMousePosition] = useState<any>({ x: null, y: null })
       │                                                      ^^^
    20 │   const containerRef = useRef<any>(null)
    21 │   const updateMousePosition = (e: any) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\MaskContainer.tsx:20:31 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    18 │   const [isHovered, setIsHovered] = useState(false)
    19 │   const [mousePosition, setMousePosition] = useState<any>({ x: null, y: null })
  > 20 │   const containerRef = useRef<any>(null)
       │                               ^^^
    21 │   const updateMousePosition = (e: any) => {
    22 │     const rect = containerRef.current.getBoundingClientRect()
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\MaskContainer.tsx:21:35 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    19 │   const [mousePosition, setMousePosition] = useState<any>({ x: null, y: null })
    20 │   const containerRef = useRef<any>(null)
  > 21 │   const updateMousePosition = (e: any) => {
       │                                   ^^^
    22 │     const rect = containerRef.current.getBoundingClientRect()
    23 │     setMousePosition({ x: e.clientX - rect.left, y: e.clientY - rect.top })
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\MaskContainer.tsx:26:3 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━━━━━

  × This hook does not specify all of its dependencies: updateMousePosition
  
    24 │   }
    25 │ 
  > 26 │   useEffect(() => {
       │   ^^^^^^^^^
    27 │     containerRef.current.addEventListener('mousemove', updateMousePosition)
    28 │     return () => {
  
  i This dependency is not specified in the hook dependency list.
  
    26 │   useEffect(() => {
  > 27 │     containerRef.current.addEventListener('mousemove', updateMousePosition)
       │                                                        ^^^^^^^^^^^^^^^^^^^
    28 │     return () => {
    29 │       if (containerRef.current) {
  
  i This dependency is not specified in the hook dependency list.
  
    30 │         containerRef.current.removeEventListener(
    31 │           'mousemove',
  > 32 │           updateMousePosition
       │           ^^^^^^^^^^^^^^^^^^^
    33 │         )
    34 │       }
  
  i Either include them or remove the dependency array
  

.\app\components\ui\Button.tsx:24:8 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    22 │   borderRadius?: string
    23 │   children: React.ReactNode
  > 24 │   as?: any
       │        ^^^
    25 │   containerClassName?: string
    26 │   borderClassName?: string
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\Button.tsx:29:18 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    27 │   duration?: number
    28 │   className?: string
  > 29 │   [key: string]: any
       │                  ^^^
    30 │ }) {
    31 │   return (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\Button.tsx:82:18 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    80 │   rx?: string
    81 │   ry?: string
  > 82 │   [key: string]: any
       │                  ^^^
    83 │ }) => {
    84 │   const pathRef = useRef<any>(null)
  
  i any disables many type checking rules. Its use should be avoided.
  

check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while applying fixes.
  

Skipped 43 suggested fixes.
If you wish to apply the suggested (unsafe) fixes, use the command biome check --fix --unsafe

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 102.
Checked 143 files in 49ms. Fixed 16 files.
Found 89 errors.
Found 2 warnings.
[41m[30m ELIFECYCLE [39m[49m [31mCommand failed with exit code 1.[39m
