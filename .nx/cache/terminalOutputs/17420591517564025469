
> react-router-devtools-docs@0.0.1 check:fix C:\Users\AlemTuzlak\projects\Remix-Dev-Tools\docs
> biome check --fix .

.\app\components\ui\Meteors.tsx:13:3 lint/style/useSelfClosingElements  FIXABLE  ━━━━━━━━━━━━━━━━━━━

  × JSX elements without children should be marked as self-closing. In JSX, it is valid for any element to be self-closing.
  
    12 │ 	return meteors.map((el, idx) => (
  > 13 │ 		<span
       │ 		^^^^^
  > 14 │ 			key={"meteor" + idx}
        ...
  > 25 │ 			}}
  > 26 │ 		></span>
       │ 		^^^^^^^^
    27 │ 	))
    28 │ }
  
  i Unsafe fix: Use a SelfClosingElement instead
  
    26 │ → → ></span>
       │     -- ---- 

.\app\components\ui\Meteors.tsx:14:9 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    12 │ 	return meteors.map((el, idx) => (
    13 │ 		<span
  > 14 │ 			key={"meteor" + idx}
       │ 			     ^^^^^^^^^^^^^^
    15 │ 			className={cn(
    16 │ 				"absolute left-1/2 top-1/2 h-0.5 w-0.5 rotate-[215] animate-meteor-effect rounded-full bg-slate-500 shadow-[0_0_0_1px_#ffffff10]",
  
  i Unsafe fix: Use a template literal.
  
    12 12 │   	return meteors.map((el, idx) => (
    13 13 │   		<span
    14    │ - → → → key={"meteor"·+·idx}
       14 │ + → → → key={`meteor${idx}`}
    15 15 │   			className={cn(
    16 16 │   				"absolute left-1/2 top-1/2 h-0.5 w-0.5 rotate-[215] animate-meteor-effect rounded-full bg-slate-500 shadow-[0_0_0_1px_#ffffff10]",
  

.\app\components\ui\Meteors.tsx:22:11 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    20 │ 			style={{
    21 │ 				top: 0,
  > 22 │ 				left: Math.floor(Math.random() * (1920 - -1920) + -1920) + "px",
       │ 				      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    23 │ 				animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + "s",
    24 │ 				animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + "s",
  
  i Unsafe fix: Use a template literal.
  
    20 20 │   			style={{
    21 21 │   				top: 0,
    22    │ - → → → → left:·Math.floor(Math.random()·*·(1920·-·-1920)·+·-1920)·+·"px",
       22 │ + → → → → left:·`${Math.floor(Math.random()·*·(1920·-·-1920)·+·-1920)}px`,
    23 23 │   				animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + "s",
    24 24 │   				animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + "s",
  

.\app\components\ui\Meteors.tsx:23:21 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    21 │ 				top: 0,
    22 │ 				left: Math.floor(Math.random() * (1920 - -1920) + -1920) + "px",
  > 23 │ 				animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + "s",
       │ 				                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    24 │ 				animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + "s",
    25 │ 			}}
  
  i Unsafe fix: Use a template literal.
  
    21 21 │   				top: 0,
    22 22 │   				left: Math.floor(Math.random() * (1920 - -1920) + -1920) + "px",
    23    │ - → → → → animationDelay:·Math.random()·*·(0.8·-·0.2)·+·0.2·+·"s",
       23 │ + → → → → animationDelay:·`${Math.random()·*·(0.8·-·0.2)·+·0.2}s`,
    24 24 │   				animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + "s",
    25 25 │   			}}
  

.\app\components\ui\Meteors.tsx:24:24 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    22 │ 				left: Math.floor(Math.random() * (1920 - -1920) + -1920) + "px",
    23 │ 				animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + "s",
  > 24 │ 				animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + "s",
       │ 				                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    25 │ 			}}
    26 │ 		></span>
  
  i Unsafe fix: Use a template literal.
  
    22 22 │   				left: Math.floor(Math.random() * (1920 - -1920) + -1920) + "px",
    23 23 │   				animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + "s",
    24    │ - → → → → animationDuration:·Math.floor(Math.random()·*·(10·-·2)·+·2)·+·"s",
       24 │ + → → → → animationDuration:·`${Math.floor(Math.random()·*·(10·-·2)·+·2)}s`,
    25 25 │   			}}
    26 26 │   		></span>
  

.\app\components\ui\Meteors.tsx:12:22 lint/correctness/noUnusedFunctionParameters  FIXABLE  ━━━━━━━━━━

  × This parameter is unused.
  
    10 │ 	const meteors = new Array(number || 20).fill(true)
    11 │ 
  > 12 │ 	return meteors.map((el, idx) => (
       │ 	                    ^^
    13 │ 		<span
    14 │ 			key={"meteor" + idx}
  
  i Unused parameters might be the result of an incomplete refactoring.
  
  i Unsafe fix: If this is intentional, prepend el with an underscore.
  
    10 10 │   	const meteors = new Array(number || 20).fill(true)
    11 11 │   
    12    │ - → return·meteors.map((el,·idx)·=>·(
       12 │ + → return·meteors.map((_el,·idx)·=>·(
    13 13 │   		<span
    14 14 │   			key={"meteor" + idx}
  

.\app\components\ui\Meteors.tsx:12:22 lint/correctness/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━

  × This parameter is unused.
  
    10 │ 	const meteors = new Array(number || 20).fill(true)
    11 │ 
  > 12 │ 	return meteors.map((el, idx) => (
       │ 	                    ^^
    13 │ 		<span
    14 │ 			key={"meteor" + idx}
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Unsafe fix: If this is intentional, prepend el with an underscore.
  
    10 10 │   	const meteors = new Array(number || 20).fill(true)
    11 11 │   
    12    │ - → return·meteors.map((el,·idx)·=>·(
       12 │ + → return·meteors.map((_el,·idx)·=>·(
    13 13 │   		<span
    14 14 │   			key={"meteor" + idx}
  

.\app\components\ui\Meteors.tsx:14:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    12 │ 	return meteors.map((el, idx) => (
    13 │ 		<span
  > 14 │ 			key={"meteor" + idx}
       │ 			                ^^^
    15 │ 			className={cn(
    16 │ 				"absolute left-1/2 top-1/2 h-0.5 w-0.5 rotate-[215] animate-meteor-effect rounded-full bg-slate-500 shadow-[0_0_0_1px_#ffffff10]",
  
  i This is the source of the key value.
  
    10 │ 	const meteors = new Array(number || 20).fill(true)
    11 │ 
  > 12 │ 	return meteors.map((el, idx) => (
       │ 	                        ^^^
    13 │ 		<span
    14 │ 			key={"meteor" + idx}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

.\app\components\ui\Button.tsx:18:7 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    16 │ 	borderRadius?: string
    17 │ 	children: React.ReactNode
  > 18 │ 	as?: any
       │ 	     ^^^
    19 │ 	containerClassName?: string
    20 │ 	borderClassName?: string
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\Button.tsx:23:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    21 │ 	duration?: number
    22 │ 	className?: string
  > 23 │ 	[key: string]: any
       │ 	               ^^^
    24 │ }) {
    25 │ 	return (
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\Button.tsx:70:17 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    68 │ 	rx?: string
    69 │ 	ry?: string
  > 70 │ 	[key: string]: any
       │ 	               ^^^
    71 │ }) => {
    72 │ 	const pathRef = useRef<any>(null)
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\Button.tsx:72:25 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    70 │ 	[key: string]: any
    71 │ }) => {
  > 72 │ 	const pathRef = useRef<any>(null)
       │ 	                       ^^^
    73 │ 	const progress = useMotionValue<number>(0)
    74 │ 
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\Button.tsx:90:4 lint/a11y/noSvgWithoutTitle ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Alternative text title element cannot be empty
  
    88 │ 	return (
    89 │ 		<>
  > 90 │ 			<svg
       │ 			^^^^
  > 91 │ 				xmlns="http://www.w3.org/2000/svg"
        ...
  > 96 │ 				{...otherProps}
  > 97 │ 			>
       │ 			^
    98 │ 				<rect fill="none" width="100%" height="100%" rx={rx} ry={ry} ref={pathRef} />
    99 │ 			</svg>
  
  i For accessibility purposes, SVGs should have an alternative text, provided via title element. If the svg element has role="img", you should add the aria-label or aria-labelledby attribute.
  

.\app\components\ui\MaskContainer.tsx:19:53 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    17 │ }) => {
    18 │ 	const [isHovered, setIsHovered] = useState(false)
  > 19 │ 	const [mousePosition, setMousePosition] = useState<any>({ x: null, y: null })
       │ 	                                                   ^^^
    20 │ 	const containerRef = useRef<any>(null)
    21 │ 	const updateMousePosition = (e: any) => {
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\MaskContainer.tsx:20:30 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    18 │ 	const [isHovered, setIsHovered] = useState(false)
    19 │ 	const [mousePosition, setMousePosition] = useState<any>({ x: null, y: null })
  > 20 │ 	const containerRef = useRef<any>(null)
       │ 	                            ^^^
    21 │ 	const updateMousePosition = (e: any) => {
    22 │ 		const rect = containerRef.current.getBoundingClientRect()
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\MaskContainer.tsx:21:34 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    19 │ 	const [mousePosition, setMousePosition] = useState<any>({ x: null, y: null })
    20 │ 	const containerRef = useRef<any>(null)
  > 21 │ 	const updateMousePosition = (e: any) => {
       │ 	                                ^^^
    22 │ 		const rect = containerRef.current.getBoundingClientRect()
    23 │ 		setMousePosition({ x: e.clientX - rect.left, y: e.clientY - rect.top })
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\MaskContainer.tsx:26:2 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━━━━━

  × This hook does not specify all of its dependencies: updateMousePosition
  
    24 │ 	}
    25 │ 
  > 26 │ 	useEffect(() => {
       │ 	^^^^^^^^^
    27 │ 		containerRef.current.addEventListener("mousemove", updateMousePosition)
    28 │ 		return () => {
  
  i This dependency is not specified in the hook dependency list.
  
    26 │ 	useEffect(() => {
  > 27 │ 		containerRef.current.addEventListener("mousemove", updateMousePosition)
       │ 		                                                   ^^^^^^^^^^^^^^^^^^^
    28 │ 		return () => {
    29 │ 			if (containerRef.current) {
  
  i This dependency is not specified in the hook dependency list.
  
    28 │ 		return () => {
    29 │ 			if (containerRef.current) {
  > 30 │ 				containerRef.current.removeEventListener("mousemove", updateMousePosition)
       │ 				                                                      ^^^^^^^^^^^^^^^^^^^
    31 │ 			}
    32 │ 		}
  
  i Either include them or remove the dependency array
  

.\app\components\ui\sticky-scroll-reveral.tsx:13:31 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    11 │ 		title: string
    12 │ 		description: React.ReactNode | string
  > 13 │ 		content?: React.ReactNode | any
       │ 		                            ^^^
    14 │ 	}[]
    15 │ 	contentClassName?: string
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\sticky-scroll-reveral.tsx:18:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━

  × Unexpected any. Specify a different type.
  
    16 │ }) => {
    17 │ 	const [activeCard, setActiveCard] = React.useState(0)
  > 18 │ 	const ref = useRef<any>(null)
       │ 	                   ^^^
    19 │ 	const { scrollYProgress } = useScroll({
    20 │ 		// uncomment line 22 and comment line 23 if you DONT want the overflow container and want to have it change on the entire page scroll
  
  i any disables many type checking rules. Its use should be avoided.
  

.\app\components\ui\sticky-scroll-reveral.tsx:56:30 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━

  × Avoid using the index of an array as key property in an element.
  
    54 │ 				<div className="max-w-2xl">
    55 │ 					{content.map((item, index) => (
  > 56 │ 						<div key={item.title + index} className="my-20">
       │ 						                       ^^^^^
    57 │ 							<motion.h2
    58 │ 								initial={{
  
  i This is the source of the key value.
  
    53 │ 			<div className="div relative flex items-start px-4">
    54 │ 				<div className="max-w-2xl">
  > 55 │ 					{content.map((item, index) => (
       │ 					                    ^^^^^
    56 │ 						<div key={item.title + index} className="my-20">
    57 │ 							<motion.h2
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

Skipped 26 suggested fixes.
If you wish to apply the suggested (unsafe) fixes, use the command biome check --fix --unsafe

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 102.
Checked 143 files in 43ms. No fixes applied.
Found 89 errors.
Found 2 warnings.
check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while applying fixes.
  

[41m[30m ELIFECYCLE [39m[49m [31mCommand failed with exit code 1.[39m
